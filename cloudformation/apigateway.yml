# add cloudwatch logs roles
# setup logging

Parameters:
  HostedZoneId:
    Type: String
    Description: Hosted Zone ID for domain in route 53

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Description: Blog Post API
      EndpointConfiguration: 
        Types:
          - REGIONAL
      Name: blogAPI
  defaultStage:
    Type: AWS::ApiGateway::Stage
    Properties: 
      RestApiId: !Ref apiGateway
      DeploymentId: !Ref deployment
      StageName: default
  apiEntryPoint:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: api
  makePost:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref apiEntryPoint
      PathPart: makePost
  makePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref makePost
      RestApiId: !Ref apiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !ImportValue makePostLambda
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }
  getPost:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref apiEntryPoint
      PathPart: getPost
  getPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      # ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref getPost
      RestApiId: !Ref apiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !ImportValue getPostLambda
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
  OptionsIPsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref getips
      RestApiId: !Ref apiGateway
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: | 
            { statusCode: 200 }
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates: { "application/json": "" }
          ResponseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }
          ResponseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
  deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - getPostMethod
      - makePostMethod
    Properties:
      Description: default deployment
      RestApiId: !Ref apiGateway
  usagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties: 
      Description: default usage paln
      Throttle: 
        BurstLimit: 25
        RateLimit: 10
      UsagePlanName: default
      ApiStages:
        - ApiId: !Ref apiGateway
          Stage: !Ref defaultStage
Outputs:
#  consumed by ipmanagementpage.yml 
  apiGatewayInvokeURL:
    Value:  !Sub "${apiGateway}.execute-api.${AWS::Region}.amazonaws.com"
    Description: Invoke URL for api gateway
    Export: 
      Name: apiInvokeUrl
  defaultStage:
    Value:  !Sub /${defaultStage}
    Description: Default Stage Name
    Export: 
      Name: defaultStage
